"""
Done:
- Split code into seperated modules.
- Database thread.
- Show detail information.
- Nice time stamp.
- Auto adjust the image size.
- Select list item to show the specified one.
- Manage the real list.
- Show received data.
- Click list item.
- Image refreshing.
- Threads communication.
"""
import tkinter as _tkinter
import math as _math

_CANVAS_WIDTH = 400
_CANVAS_HEIGHT = 300


class VisualizerPanel(_tkinter.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.__master = master
        self.__current_image = None
        self.__current_selection = None
        self.__histories = []
        self.pack()
        self.__create_widgets()
        self.__master.title('Visualizer')

    def __create_widgets(self):
        self.__master.protocol('WM_DELETE_WINDOW', self.__quit)
        self.__create_image()
        self.__create_buttons()

    def __create_image(self):
        self.__canvas = _tkinter.Canvas(
            self, width=_CANVAS_WIDTH,
            height=_CANVAS_HEIGHT,
        )
        self.__canvas.pack(side=_tkinter.LEFT, expand=1)
        _draw(self.__canvas)

    def __create_buttons(self):
        quit_button = _tkinter.Button(
            self, text='Quit', fg='black',
            command=self.__quit,
        )
        quit_button.pack(side=_tkinter.BOTTOM)

    def __quit(self):
        self.__is_listening = False
        self.__master.destroy()


def _draw(canvas: _tkinter.Canvas):
    half_height = _CANVAS_HEIGHT // 2
    canvas.create_line(0, half_height, _CANVAS_WIDTH, half_height)
    n = 320
    n_1 = n - 1
    last_x = 0
    last_y = 0
    for i in range(n):
        y = _CANVAS_HEIGHT - _math.sqrt((1 - _math.cos(_math.pi * 2 * (i / n_1))) * 0.5) * _CANVAS_HEIGHT
        canvas.create_line(last_x, last_y, i, y)
        last_x = i
        last_y = y

    to_draw = [
        -0.997925, -0.997925, -0.884521, -0.039062, 0.164795, 0.213013, 0.224854, 0.228394, 0.229858, 0.230591,
        0.230957,
        0.229126, 0.230713, 0.231323, 0.229248, 0.226562, 0.220703, 0.216309, 0.213135, 0.210571, 0.204956, 0.200928,
        0.196655, 0.191528, 0.189209, 0.186768, 0.187134, 0.183594, 0.182739, 0.182617, 0.182129, 0.184326, 0.182495,
        0.180420, 0.180054, 0.176758, 0.178955, 0.178955, 0.179321, 0.177368, 0.181396, 0.182495, 0.185669, 0.186890,
        0.188110, 0.192017, 0.194092, 0.197632, 0.201050, 0.202881, 0.204712, 0.206665, 0.206543, 0.208862, 0.208008,
        0.206055, 0.203735, 0.200684, 0.198853, 0.196655, 0.194336, 0.192383, 0.186523, 0.181274, 0.178345, 0.175781,
        0.171997, 0.168945, 0.162964, 0.159912, 0.157227, 0.154175, 0.151855, 0.151489, 0.149536, 0.151733, 0.151733,
        0.154785, 0.154785, 0.156006, 0.156372, 0.155884, 0.157715, 0.156494, 0.158203, 0.158325, 0.156738, 0.155884,
        0.155640, 0.155029, 0.153564, 0.151001, 0.151367, 0.150391, 0.148926, 0.149658, 0.148926, 0.146729, 0.144653,
        0.141724, 0.140015, 0.139893, 0.138916, 0.138916, 0.137817, 0.138550, 0.138550, 0.139526, 0.139648, 0.139160,
        0.141602, 0.145630, 0.147217, 0.148804, 0.150146, 0.150513, 0.151367, 0.152710, 0.154541, 0.152954, 0.150513,
        0.145508, 0.142578, 0.138672, 0.135986, 0.131958, 0.130005, 0.129272, 0.125000, 0.123535, 0.119995, 0.118286,
        0.116089, 0.113770, 0.111572, 0.112305, 0.109497, 0.110474, 0.110718, 0.109863, 0.111328, 0.110718, 0.112915,
        0.116089, 0.116821, 0.119385, 0.120972, 0.123169, 0.126953, 0.127319, 0.130371, 0.131714, 0.131470, 0.132935,
        0.132446, 0.132202, 0.130615, 0.128540, 0.127808, 0.124023, 0.122925, 0.121704, 0.122559, 0.118042, 0.117676,
        0.113647, 0.110840, 0.109985, 0.105835, 0.102783, 0.101074, 0.099243, 0.097534, 0.097290, 0.096680, 0.096191,
        0.095337, 0.096436, 0.095093, 0.098389, 0.097656, 0.099731, 0.100220, 0.104004, 0.104126, 0.102417, 0.102783,
        0.101685, 0.104248, 0.102661, 0.103394, 0.099365, 0.097168, 0.094604, 0.094116, 0.090942, 0.087891, 0.084351,
        0.082520, 0.082031, 0.081177, 0.080688, 0.077148, 0.077148, 0.073608, 0.071777, 0.071899, 0.071533, 0.071167,
        0.071167, 0.068970, 0.070068, 0.070068, 0.069458, 0.069824, 0.068481, 0.069214, 0.071045, 0.072510, 0.072388,
        0.074829, 0.073608, 0.072021, 0.072388, 0.073120, 0.069946, 0.067993, 0.065308, 0.063354, 0.063599, 0.060913,
        0.060059, 0.056519, 0.052856, 0.051147, 0.048828, 0.049194, 0.046387, 0.045532, 0.044189, 0.044312, 0.044434,
        0.045898, 0.045044, 0.044189, 0.044922, 0.045654, 0.048462, 0.052368, 0.055054, 0.055664, 0.057129, 0.060669,
        0.060547, 0.062866, 0.063232, 0.064941, 0.063965, 0.064575, 0.065186, 0.064697, 0.065796, 0.065796, 0.064941,
        0.066040, 0.066040, 0.064453, 0.063599, 0.064331, 0.062256, 0.061279, 0.059326, 0.057495, 0.055542, 0.054932,
        0.052246, 0.050537, 0.049072, 0.049561, 0.048340, 0.047729, 0.049072, 0.049438, 0.051270, 0.049438, 0.049438,
        0.050903, 0.052368, 0.052368, 0.053955, 0.053589, 0.053467, 0.055542, 0.053711, 0.054443, 0.050537, 0.047363,
        0.045654, 0.044434, 0.044556, 0.041626, 0.041504, 0.038330, 0.037476, 0.036987, 0.036133, 0.035278, 0.036377,
        0.035522, 0.035645, 0.035645, 0.036743, 0.036499, 0.035645, 0.033325, 0.037842, 0.039307, 0.040527, 0.042603,
        0.041504,
    ]
    for i in range(len(to_draw) - 1):
        x1 = i
        x2 = i + 1
        y1 = half_height + to_draw[x1] * half_height
        y2 = half_height + to_draw[x2] * half_height
        canvas.create_line(x1, y1, x2, y2)


def __main():
    gui = VisualizerPanel(_tkinter.Tk())
    gui.mainloop()


if __name__ == '__main__':
    __main()
