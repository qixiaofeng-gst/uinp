目标：
# 完成一次完整服务端部署
即以 Assets\LuaFramework\Scripts\Manager\GameManager.cs GetConfig 为起点，所有的依赖服务端的请求，对应的提供支持的服务器的部署
## 第一步是在本机配置好环境，使开发机可脱离内网环境运行，缺失知识：
##* 数据库部署
##** 从 0 开始怎么部，数据依赖 & SQL 脚本依赖
##* 登陆服务器
##** http://192.168.1.253/platform/
##** http://192.168.1.250:8080/
##** http://192.168.1.250:8888/
##* 热更服务器
##** http://192.168.1.253/platform/
##* 资源服务器
##** http://192.168.1.253/platform/
##* 配置服务器
##** http://192.168.1.253/platform/
##** http://192.168.1.250:8080/
##* 其它所有相关服务器

=======
officer 25223 Rufus

=======
瑞亚策略游戏开发相关
ssh: root@192.168.250 9ol.=[;. 日志目录：/usr/docker/game/game_logs
ftp: 192.168.1.253 传输方式为主动 share:无密码
http://192.168.1.253:8899 wiki
http://192.168.1.253:8888 jira qixiaofeng
http://192.168.1.250:8000/account/login deploy developer:developer
http://192.168.1.253:8877/nexus/ admin:admin123
https://192.168.1.253/svn/project/wastland_survivor
https://192.168.1.253/svn/project/wastland_survivor/client
192.168.1.250:3306 developer:Rhea2017.com 内网数据库
电脑端 wasteland wars 解压后，luaframework 要拷贝到 C 盘根目录
redis.index 用 4
最后一个可运行的 game server 的 svn revision 是 23366

=======
Netty is an asynchronous event-driven network application framework  for rapid development of maintainable high performance protocol servers & clients.
The Spring Framework is a Java platform that provides comprehensive infrastructure support for developing Java applications. Spring handles the infrastructure so you can focus on your application.
MyBatis is a first class persistence framework with support for custom SQL, stored procedures and advanced mappings.

======= lua template =======
--[[
@Author: qixiaofeng
@Name: 军官技能科技页面
]]

--[[
@Section: Exports
]]
UIOfficerSkillTech = fgui.window_class(UI_Base)
OfficerSkillTech = {
  is_show_ui = false,
}

--[[
@Section: Locals
]]
local this = OfficerSkillTech
local util = DungeonUtil
local comps = {}
local comps_config = {}

--[[
@Section: fgui
]]
function UIOfficerSkillTech:ctor()
end

function UIOfficerSkillTech:OnInit()
end

function UIOfficerSkillTech:OnShown()
	UIManager.LoadUIPackage(UINewNames.UIOfficerSkillTech, function()
		local panel = UIPackage.CreateObject('units_management', 'tech_for_skill').asCom
    UIOfficerSkillTech.contentPane = panel
    this.initialize_data()
    this.bind_components(panel)
    this.initialize_comps()
	end, 'UI/units_management/units_management')
end

function UIOfficerSkillTech:OnHide()
	this.is_show_ui = false
end

--[[
@Section: Data
]]
local ReceivedData = {}
local SkillTech = {}

function ReceivedData:New()
	local o ={}
	setmetatable(o, self)
	self.__index = self
	return o
end

function ReceivedData:ReadFrom(msg)
  -- TODO
end

function ReceivedData:UpdateToUI()
  util.update_ui(comps, comps_config)
end

function SkillTech:New()
	local o ={}
	setmetatable(o, self)
	self.__index = self
	return o
end

function SkillTech:ReadFrom(msg)
  -- TODO
end

--[[
@Section: Request and Handle
]]
function this.request_9065(level)
  level = level or 0
	local msg = CNetMessage.New()
	msg.MessageID = Message.GET_Officer_Skill_Tech
 	msg.SessionID = 1
  -- msg:AddInt(level)
 	CurrentLogicSendMessage(msg)
end

function this.handle_9065(msg)
	if msg.MessageStatus ~= 0 then return end
	if this.is_show_ui == false then return end
  
  this.data = ReceivedData:New()
  this.data:ReadFrom(msg)
  this.data:UpdateToUI()
  
  UIManager.NewOpenUI(UINewNames.UIOfficerSkillTech)
end

--[[
@Section: UI Event Handlers
]]
function this.on_close()
	UIManager.NewHideUI(UINewNames.UIOfficerSkillTech)
end

--[[
@Section: Utilities
]]
function this.initialize_data()
	this.is_show_ui = false
end

function this.bind_components(panel)
  util.bind_to(comps, panel, comps_config)
end

function this.initialize_comps()
	this.is_show_ui = true
  util.init_ui(comps, comps_config)
end

util.copy(comps_config, {
  box_state = {
    comp_type = util.CT_CTRL,
    cb_init = function(comp)
      comp:SetSelectedIndex(0)
    end
  },
})
