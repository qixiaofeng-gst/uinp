cd /mnt/c/Users/qixia/Documents/uinp/gists/pjo
g++ solving.cpp && less input.txt | ./a.out
BDUSS=Gd0VWU4SjVmVDZMTmg2MFZ5WXE2Y0lsTFpHd2ljcnJXVUpOWXVYMnp0ZjM3YmhkRVFBQUFBJCQAAAAAAAAAAAEAAAALbo46cWlfeGlhb2ZlbmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPdgkV33YJFdO; STOKEN=4c4b144b3021fd377c776a1eb5154596f44f1571882db141985f640207447c61

keep fit: jeff cavaliere 5 minutes

c 的类型前置语法，迫使声明数组、指针、方法的时候，命名夹在类型当中，使得阅读变得相当困难。
go 的类型后置语法主要是为了解决前述问题。

快手的面试题：
1. offsetWidth, scrollWidth, clientWidth 是什么，异同
2. 垂直布局的几种实现方案
3. setTimeout 和 promise 的执行时机
4. js 运算时的类型转换 1 + [], 1 + [1, 2, 3, 4], 1 + '1', 1 * '3'
5. Promise.all 自行实现
6. commonjs 和 es6 的 require 和 import 的区别
7. [7, 6, 4, 1, 2, 3] 按日期排的价格，求最大可能的利润

创业公司干了 7 年，创业成功率太低，自身的成长也停滞了，与我职业规划的预期不符合，我现在希望在前端领域能够专精，而不是如同当前什么都做又不精通。

像素管道 js > style > layout > paint > composite
优化的核心思想是，影响尽量少的环节

1. 算法练习
   - 排序已经差不多够了
2. 树、图复习
   - 已经看过了二叉、B-树
   - 没有练习过，但是聊起来差不多够了
3. React、VUE 源码阅读
   - 没有
4. ()* 的解，* 可用作空字符串、左括号或右括号，左右括号必须成对，判断输入字符串是否有效
   - 解出来了，正向来一次，反向来一次，过了，但是感觉可能有漏洞
5. id + 时间戳的日志，shell 命令输出按出现次数排序的 id
   - 
6. 前后端分离
   - 老做法是服务端产出所有内容
   - 现在是服务端只给数据、客户端负责呈现
   - 老做法耦合严重，维护不易
   - 现在新的做法可以前后端并行开发，各自更专注
7. JQuery 或 Vue、React 开发的区别
   - 
8. Local Storage、Cookie 和 Session Storage
   - 
9. 优化网页渲染性能
   - 聊起来应该差不多了，暂时还没面试时用过
10. 浏览器跨域访问
   - 
11. react 组件生命周期、vue 组件生命周期
   - 
12. 自行实现 JS instanceof
13. webpack、gulp 实践
   

BEM: block, element, modifier.
block, 1. nested structure 2. arbitrary placement 3. re-use
element, a constituent part of a block that can't be used outside of it
modifier, defines the appearance and behavior of a block or an element

db.user.find({ 'mc_member.Mobile': '18621508640' })
db.user.find({ _id: ObjectId('5d706e4ee87c084e92637021') })
                              5d706ec4e87c084e92637025
db.admin_order.find({ pay_id: ObjectId('5d706ec4e87c084e92637025') })
db.admin_gb.find({ _id: ObjectId('5d69fbc6e87c084e92635e3b') })
db.admin_order.find({ group_id: ObjectId('5d69fbc6e87c084e92635e3b') })
more /hd1/forever_logs/gOlQ.log | grep -C 20 '2019-8-31 12:46:5'

redux/mobox

# 开发信息
#* 图解开源协议 https://www.cnblogs.com/KruceCoder/p/7991052.html
#* 安装 tensorflow 成功的前提是安装 python3.5.2，然后 pip install --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.0.0-cp35-cp35m-win_amd64.whl
升级的方法：
pip search --version tensorflow
pip install --upgrade tensorflow==1.1.0rc1

# 代码链接
#* SVN http://earth.bao.ac.cn/svn/gsegment/trunk/***
#* GIT git@github.com:qixiaofeng/***
#* 当 .gitignore 不生效时，用下列两语句
git rm -r --cached .
git add .

# 常用指令
#* 软链接 ln -s target_to_link link_name
#* 在 linux 下，两种使命令脱离 shell 执行的方法：
#*# nohup command_and_paramters &
#*# command_and_paramters </dev/null &>/dev/null &
#* 查 linux 已占用端口 sudo lsof -i -P -n | grep LISTEN
#* GIT 推送本地工程到远程空工程
git pull origin master --allow-unrelated-histories
git remote add origin git@blablabla:url
git push -u origin master
#* 在 windows 下使命令脱离 cmd 执行的方法（关闭 cmd 后进程将退出，因此大多数情况无效）：
start "command_name" /B command_and_paramters > somefile.txt

# Windows 中安装 MongoDB 服务
#* 创建数据文件和日志文件目录；
#* 以下列格式创建配置：
systemLog:
  destination: file
  path: c:\data\log\mongod.log
storage:
  dbPath: c:\data\db
#* 安装服务：mongod.exe --config "config/file/path" --install
#* 启动：net start MongoDB
# Windows 10 中在管理员权限下的 PowerShell 中（c:/windows/system32/windowspowershell 目录下找 powershell）关闭防火墙：
Set-NetFirewallProfile -Profile Domain, Public,Private -Enabled false

# 常用正则
#* 分节删除：\r\n-+\r\n\r\n分节阅读\s.+\r\n\r\n

# Web 前端开发跨域 Chrome 设置
"C:/Program Files (x86)/Google/Chrome/Application/chrome.exe" --disable-web-security --user-data-dir="D:/TempDocs/chrome_data/"
Windows 下可创建快捷方式并添加参数

# Windows 重启 LxssManager 服务可重启 Linux 子系统

# Java 执行指定 jar 包中的指定 class 和 library path 的命令行：
java -Djava.library.path=dir/path -cp xxx.jar xxx.xxx.ClassName
# eclipse 中配置 ${user} 变量的方法：在 eclipse.ini 中的 -vmargs 之后一行添加 -Duser.name=XXX

# SQL 拷贝表数据语句：insert into table_1 (column_1, colum_2) select column_a, column_b from table_2;
# 如果 select column_names from table; 的 column_names 中有常量值，比如数值或字符串，则在返回结果中该列是该常量值
# select 语句可以用在 from 和 where 之后
# from 之后可以放多个表（或 select 语句），此时 from 对应的 select 语句中所有列需带表名

# SVN 解决树冲突，需先 svn resolve --accept=working，accept 的参数值随需要而定